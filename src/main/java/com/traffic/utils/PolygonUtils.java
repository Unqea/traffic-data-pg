package com.traffic.utils;

import java.util.ArrayList;
import java.util.List;

/**
 *
 这段代码定义了一个名为 PolygonUtils 的类，其中包含了一些静态方法来处理多边形的计算和操作。让我解释一下关键代码的作用：

 main 方法：这是程序的入口点，用于测试 PolygonUtils 类中的方法。在 main 方法中，首先定义了一个包含多个经纬度坐标的字符串 coordinates，然后调用 getResCoordinates 方法来处理这些坐标并打印结果。

 getResCoordinates 方法：这个方法接受一个字符串形式的经纬度坐标串和一个距离值作为输入，并返回一个字符串形式的新的经纬度坐标串。它的作用是对输入的坐标串进行处理，计算出每个坐标点沿着原有方向延伸一定距离后的新坐标点。具体流程如下：

 首先，将输入的经纬度坐标串按照分号分隔，并将每个坐标点解析为经度和纬度的数组。
 接着，计算坐标点的几何中心。
 然后，遍历每个坐标点，计算其相对于中心点的方向，并利用 extendPoint 方法计算沿着该方向延伸指定距离后的新坐标点。
 最后，将新的坐标点串联成一个字符串并返回。
 calculateCentroid 方法：这个方法接受一个包含多个经纬度坐标的列表，计算并返回这些坐标的几何中心。具体计算过程是将所有经度和纬度的值求和并求平均值，得到中心点的坐标。

 calculateDirection 方法：这个方法接受两对经纬度坐标，分别表示起点和终点，计算并返回从起点到终点的方向角度。具体计算过程是利用经纬度坐标之间的差值，通过数学公式计算出方向角度。

 extendPoint 方法：这个方法接受一个经度、纬度、距离和方向角度，计算并返回沿着指定方向延伸指定距离后的新的经纬度坐标点。具体计算过程是利用球面三角学中的公式，根据给定的方向和距离，计算出延伸后的坐标点的经度和纬度。
 */

public class PolygonUtils {
    // 测试
    public static void main(String[] args) {
        //String coordinates = "120.140423,30.21358;120.1403084,30.21123861;120.1394512,30.21128554;120.1394366,30.20950005;120.1402116,30.20730008;120.1406684,30.20640571;120.1405105,30.20552866;120.1397942,30.20528989;120.1382926,30.20443032;120.1377116,30.20444956;120.1374171,30.20474934;120.1371405,30.20482712;120.136768,30.20478188;120.1368706,30.20461603;120.1371492,30.2046293;120.1374331,30.20435604;120.1378018,30.20415441;120.1383271,30.20415441;120.1386773,30.20433747;120.1393563,30.20368598;120.139082,30.20293593;120.1390991,30.20158963;120.1389505,30.2012462;120.1384077,30.2006798;120.1380593,30.19963807;120.1407434,30.19989579;120.1423373,30.20031355;120.1432367,30.20025235;120.1452536,30.2009841;120.1458662,30.20099874;120.1472453,30.20162471;120.1482045,30.20180172;120.1479511,30.20119598;120.147246,30.20037775;120.1386163,30.19822765;120.1371973,30.19760517;120.1419299,30.18798475;120.142188,30.18785222;120.1424531,30.18784524;120.1430669,30.18800568;120.1432064,30.18783129;120.1422787,30.18764295;120.141909,30.18773363;120.1390385,30.19314326;120.133886,30.191072;120.127218,30.18529;120.12486,30.182437;120.1192201,30.18663411;120.1185067,30.18619466;120.1176289,30.18531548;120.1161583,30.18336589;120.1157926,30.18356662;120.1177962,30.18596842;120.1175789,30.18597439;120.1171042,30.18548204;120.1160802,30.18513319;120.1150849,30.18514513;120.114553,30.18457818;120.1144556,30.18408556;120.1138894,30.18353597;120.1137177,30.18352458;120.1132772,30.18433241;120.1125393,30.18515191;120.1125564,30.1853182;120.1127224,30.18542128;120.11286,30.18615451;120.1125681,30.18628608;120.1122757,30.18705268;120.1116895,30.18694092;120.1102018,30.18727675;120.1097298,30.18721978;120.1095809,30.18733995;120.1096956,30.18748318;120.1094694,30.18787272;120.1091262,30.18768392;120.1090004,30.1878559;120.1086827,30.18774984;120.1084253,30.18817084;120.1080952,30.18792752;120.1078779,30.18629801;120.1071455,30.18400716;120.1051736,30.18340603;120.1034142,30.18464898;120.1024525,30.18309082;120.1028415,30.18109701;120.1006548,30.17981391;120.100609,30.17790012;120.0992866,30.1777455;120.0993207,30.17625054;120.1005086,30.17620171;120.1024946,30.17564345;120.1026264,30.17538845;120.1018194,30.17490424;120.1019718,30.1745006;120.0992841,30.17314833;120.0986428,30.17381565;120.0970142,30.17470866;120.0948215,30.17502903;120.0926571,30.17583008;120.0859302,30.17880778;120.0789111,30.1868042;120.0782954,30.18899251;120.0781098,30.19198758;120.0787261,30.19503282;120.07854,30.19839301;120.077162,30.20179443;120.0784342,30.20381212;120.079391,30.20618815;120.0798728,30.20913873;120.0798815,30.21324788;120.0786277,30.21528897;120.076958,30.2157706;120.076661,30.21619964;120.0763639,30.21762701;120.0767682,30.21817155;120.0769332,30.2186666;120.0763887,30.21938441;120.0763598,30.21967318;120.0764382,30.21991658;120.077519,30.22096854;120.077222,30.22162447;120.0778986,30.22285383;120.077815,30.2239192;120.078342,30.22424819;120.0786906,30.22464835;120.0792207,30.22555593;120.0798437,30.22607572;120.0805367,30.22644288;120.0822085,30.22637481;120.0837431,30.22569;120.0838875,30.22596743;120.0854892,30.2276186;120.0856872,30.22800639;120.0861781,30.22829929;120.0863308,30.2302578;120.0859265,30.2312025;120.0854727,30.2314954;120.0853118,30.23232047;120.0862153,30.23391285;120.0865721,30.23637259;120.0876839,30.2369192;120.0882656,30.23770921;120.0888575,30.23802686;120.0893773,30.23814856;120.0905489,30.23919227;120.0911182,30.24010397;120.0918195,30.24064027;120.0919928,30.24126732;120.0924714,30.24212952;120.093907,30.24292159;120.0945608,30.24496982;120.0950559,30.24482956;120.0953075,30.24487081;120.0964998,30.24558037;120.0969453,30.24661171;120.0972341,30.24678497;120.097956,30.24816284;120.0986284,30.24827835;120.1005622,30.24795245;120.1030364,30.24910239;120.1043771,30.24993158;120.1059654,30.24987796;120.1065635,30.2500636;120.1068402,30.25037214;120.1094619,30.24798666;120.110188,30.24745036;120.1116566,30.2466913;120.1122589,30.24755762;120.1102622,30.24872922;120.1076287,30.25113121;120.1081274,30.25205529;120.1088235,30.25273184;120.1095042,30.25282466;120.1096218,30.2529443;120.1096465,30.25377143;120.1091489,30.25465271;120.1089529,30.25592847;120.1092397,30.25637917;120.1101349,30.25899361;120.1104113,30.25931332;120.1110919,30.25972895;120.1113735,30.26035085;120.1112786,30.26091602;120.1113523,30.26114859;120.1120729,30.26151922;120.1128299,30.2626836;120.1135395,30.26321474;120.1138293,30.26400681;120.114049,30.26425639;120.1164231,30.26554144;120.1177969,30.26670066;120.1182806,30.26723696;120.1184621,30.26783926;120.1191097,30.26804346;120.1194645,30.26829098;120.1199039,30.26900467;120.1202958,30.26928519;120.1206856,30.27010614;120.1210462,30.2702748;120.1215399,30.26977546;120.1219112,30.26883488;120.1216059,30.26761378;120.1209706,30.26663195;120.1183304,30.2648663;120.1175796,30.26371945;120.116795,30.26282118;120.1161971,30.26239746;120.1156303,30.26278919;120.1154818,30.2626118;120.1160181,30.26223948;120.1152353,30.26140204;120.1151299,30.26091715;120.1153282,30.26023044;120.1158191,30.26047796;120.1160626,30.26048421;120.1167315,30.25999105;120.117012,30.25997097;120.1167114,30.25804036;120.1178125,30.25810845;120.1179069,30.25799371;120.1177037,30.25789361;120.1177726,30.25781331;120.1176893,30.2577474;120.1182499,30.25720656;120.1189729,30.2572375;120.11914,30.25706423;120.1195668,30.25730062;120.1206158,30.25752833;120.1210242,30.25734888;120.1212346,30.25676514;120.1219586,30.2568724;120.1224141,30.25713501;120.1231437,30.25655029;120.1239416,30.25642132;120.124056,30.25603973;120.1240127,30.25553953;120.1246975,30.25550859;120.1249664,30.25539334;120.1255731,30.25551581;120.1260331,30.25591906;120.1263518,30.25604592;120.1277028,30.25579014;120.1279256,30.25584996;120.1280494,30.25564576;120.1279999,30.25541061;120.127676,30.25471755;120.1281174,30.25464123;120.1289817,30.25390073;120.129518,30.25372953;120.130013,30.25387392;120.1303163,30.25346448;120.13021,30.25290653;120.1313424,30.25250637;120.1315611,30.25268788;120.1318664,30.25269201;120.1321366,30.25335206;120.1330441,30.2548805;120.1329183,30.25531779;120.1335412,30.2557097;120.1338878,30.25626662;120.1337269,30.25672866;120.1345334,30.2595308;120.1348057,30.26005472;120.135573,30.2606199;120.1379017,30.26146662;120.1381946,30.26190391;120.1383879,30.26193008;120.1391992,30.26158832;120.1398881,30.26160895;120.1400449,30.26209574;120.1403295,30.26241752;120.1406183,30.26253303;120.1409483,30.26250002;120.1417486,30.26185647;120.1421728,30.26100729;120.1422306,30.26043593;120.1427091,30.26014509;120.1428783,30.2598852;120.1440664,30.25987282;120.1480372,30.26118783;120.1494314,30.26099698;120.148596,30.26044212;120.1485259,30.25940253;120.1494953,30.25948504;120.1500935,30.25974081;120.1515236,30.25995074;120.1526315,30.2595311;120.1581328,30.26156009;120.1588176,30.25849908;120.1587736,30.25794463;120.1588748,30.25752323;120.1627848,30.25161251;120.1628488,30.2507748;120.1627552,30.25058262;120.1619865,30.25010956;120.1622127,30.24979736;120.161387,30.24929308;120.1610739,30.2488661;120.160858,30.24824442;120.1608408,30.24735989;120.1610202,30.24614946;120.1608519,30.24544101;120.1592584,30.24221412;120.158234,30.24111154;120.1584977,30.23715951;120.1575985,30.2359177;120.1568906,30.23528698;120.1566171,30.23468333;120.1564693,30.23388997;120.1561193,30.23338694;120.157477,30.23300298;120.1594146,30.23162923;120.159586,30.23139404;120.1595345,30.22986464;120.1596829,30.22941759;120.1603157,30.22847678;120.1615278,30.22792453;120.1617272,30.2272876;120.1614757,30.22594754;120.1608816,30.2247914;120.1600361,30.22432292;120.1592936,30.22510335;120.1588254,30.22513882;120.1586659,30.22422526;120.1580943,30.22296604;120.1578657,30.2211103;120.1568831,30.22060791;120.154758,30.22038222;120.1550933,30.21765706;120.1544078,30.21724582;120.1532498,30.21756646;120.1524959,30.21756782;120.151359,30.21616591;120.1513417,30.21567898;120.148479,30.21273899;120.147245,30.21198486;120.1459993,30.21167752;120.1445025,30.21193169;120.1435753,30.21233615;120.1425042,30.21267512;120.141641,30.213394;120.140423,30.21358";
        String coordinates = "120.140423,30.21358;120.1403084,30.21123861;120.1394512,30.21128554;120.1394366,30.20950005;120.1402116,30.20730008;120.1406684,30.20640571;120.1405105,30.20552866;120.1397942,30.20528989;120.1382926,30.20443032;120.1377116,30.20444956;120.1374171,30.20474934;120.1371405,30.20482712;120.136768,30.20478188;120.1368706,30.20461603;120.1371492,30.2046293;120.1374331,30.20435604;120.1378018,30.20415441;120.1383271,30.20415441;120.1386773,30.20433747;120.1393563,30.20368598;120.139082,30.20293593;120.1390991,30.20158963;120.1389505,30.2012462;120.1384077,30.2006798;120.1380593,30.19963807;120.1407434,30.19989579;120.1423373,30.20031355;120.1432367,30.20025235;120.1452536,30.2009841;120.1458662,30.20099874;120.1472453,30.20162471;120.1482045,30.20180172;120.1479511,30.20119598;120.147246,30.20037775;120.1386163,30.19822765;120.1371973,30.19760517;120.1419299,30.18798475;120.142188,30.18785222;120.1424531,30.18784524;120.1430669,30.18800568;120.1432064,30.18783129;120.1422787,30.18764295;120.141909,30.18773363;120.1390385,30.19314326;120.133886,30.191072;120.127218,30.18529;120.12486,30.182437;120.1192201,30.18663411;120.1185067,30.18619466;120.1176289,30.18531548;120.1161583,30.18336589;120.1157926,30.18356662;120.1177962,30.18596842;120.1175789,30.18597439;120.1171042,30.18548204;120.1160802,30.18513319;120.1150849,30.18514513;120.114553,30.18457818;120.1144556,30.18408556;120.1138894,30.18353597;120.1137177,30.18352458;120.1132772,30.18433241;120.1125393,30.18515191;120.1125564,30.1853182;120.1127224,30.18542128;120.11286,30.18615451;120.1125681,30.18628608;120.1122757,30.18705268;120.1116895,30.18694092;120.1102018,30.18727675;120.1097298,30.18721978;120.1095809,30.18733995;120.1096956,30.18748318;120.1094694,30.18787272;120.1091262,30.18768392;120.1090004,30.1878559;120.1086827,30.18774984;120.1084253,30.18817084;120.1080952,30.18792752;120.1078779,30.18629801;120.1071455,30.18400716;120.1051736,30.18340603;120.1034142,30.18464898;120.1024525,30.18309082;120.1028415,30.18109701;120.1006548,30.17981391;120.100609,30.17790012;120.0992866,30.1777455;120.0993207,30.17625054;120.1005086,30.17620171;120.1024946,30.17564345;120.1026264,30.17538845;120.1018194,30.17490424;120.1019718,30.1745006;120.0992841,30.17314833;120.0986428,30.17381565;120.0970142,30.17470866;120.0948215,30.17502903;120.0926571,30.17583008;120.0859302,30.17880778;120.0789111,30.1868042;120.0782954,30.18899251;120.0781098,30.19198758;120.0787261,30.19503282;120.07854,30.19839301;120.077162,30.20179443;120.0784342,30.20381212;120.079391,30.20618815;120.0798728,30.20913873;120.0798815,30.21324788;120.0786277,30.21528897;120.076958,30.2157706;120.076661,30.21619964;120.0763639,30.21762701;120.0767682,30.21817155;120.0769332,30.2186666;120.0763887,30.21938441;120.0763598,30.21967318;120.0764382,30.21991658;120.077519,30.22096854;120.077222,30.22162447;120.0778986,30.22285383;120.077815,30.2239192;120.078342,30.22424819;120.0786906,30.22464835;120.0792207,30.22555593;120.0798437,30.22607572;120.0805367,30.22644288;120.0822085,30.22637481;120.0837431,30.22569;120.0838875,30.22596743;120.0854892,30.2276186;120.0856872,30.22800639;120.0861781,30.22829929;120.0863308,30.2302578;120.0859265,30.2312025;120.0854727,30.2314954;120.0853118,30.23232047;120.0862153,30.23391285;120.0865721,30.23637259;120.0876839,30.2369192;120.0882656,30.23770921;120.0888575,30.23802686;120.0893773,30.23814856;120.0905489,30.23919227;120.0911182,30.24010397;120.0918195,30.24064027;120.0919928,30.24126732;120.0924714,30.24212952;120.093907,30.24292159;120.0945608,30.24496982;120.0950559,30.24482956;120.0953075,30.24487081;120.0964998,30.24558037;120.0969453,30.24661171;120.0972341,30.24678497;120.097956,30.24816284;120.0986284,30.24827835;120.1005622,30.24795245;120.1030364,30.24910239;120.1043771,30.24993158;120.1059654,30.24987796;120.1065635,30.2500636;120.1068402,30.25037214;120.1094619,30.24798666;120.110188,30.24745036;120.1116566,30.2466913;120.1122589,30.24755762;120.1102622,30.24872922;120.1076287,30.25113121;120.1081274,30.25205529;120.1088235,30.25273184;120.1095042,30.25282466;120.1096218,30.2529443;120.1096465,30.25377143;120.1091489,30.25465271;120.1089529,30.25592847;120.1092397,30.25637917;120.1101349,30.25899361;120.1104113,30.25931332;120.1110919,30.25972895;120.1113735,30.26035085;120.1112786,30.26091602;120.1113523,30.26114859;120.1120729,30.26151922;120.1128299,30.2626836;120.1135395,30.26321474;120.1138293,30.26400681;120.114049,30.26425639;120.1164231,30.26554144;120.1177969,30.26670066;120.1182806,30.26723696;120.1184621,30.26783926;120.1191097,30.26804346;120.1194645,30.26829098;120.1199039,30.26900467;120.1202958,30.26928519;120.1206856,30.27010614;120.1210462,30.2702748;120.1215399,30.26977546;120.1219112,30.26883488;120.1216059,30.26761378;120.1209706,30.26663195;120.1183304,30.2648663;120.1175796,30.26371945;120.116795,30.26282118;120.1161971,30.26239746;120.1156303,30.26278919;120.1154818,30.2626118;120.1160181,30.26223948;120.1152353,30.26140204;120.1151299,30.26091715;120.1153282,30.26023044;120.1158191,30.26047796;120.1160626,30.26048421;120.1167315,30.25999105;120.117012,30.25997097;120.1167114,30.25804036;120.1178125,30.25810845;120.1179069,30.25799371;120.1177037,30.25789361;120.1177726,30.25781331;120.1176893,30.2577474;120.1182499,30.25720656;120.1189729,30.2572375;120.11914,30.25706423;120.1195668,30.25730062;120.1206158,30.25752833;120.1210242,30.25734888;120.1212346,30.25676514;120.1219586,30.2568724;120.1224141,30.25713501;120.1231437,30.25655029;120.1239416,30.25642132;120.124056,30.25603973;120.1240127,30.25553953;120.1246975,30.25550859;120.1249664,30.25539334;120.1255731,30.25551581;120.1260331,30.25591906;120.1263518,30.25604592;120.1277028,30.25579014;120.1279256,30.25584996;120.1280494,30.25564576;120.1279999,30.25541061;120.127676,30.25471755;120.1281174,30.25464123;120.1289817,30.25390073;120.129518,30.25372953;120.130013,30.25387392;120.1303163,30.25346448;120.13021,30.25290653;120.1313424,30.25250637;120.1315611,30.25268788;120.1318664,30.25269201;120.1321366,30.25335206;120.1330441,30.2548805;120.1329183,30.25531779;120.1335412,30.2557097;120.1338878,30.25626662;120.1337269,30.25672866;120.1345334,30.2595308;120.1348057,30.26005472;120.135573,30.2606199;120.1379017,30.26146662;120.1381946,30.26190391;120.1383879,30.26193008;120.1391992,30.26158832;120.1398881,30.26160895;120.1400449,30.26209574;120.1403295,30.26241752;120.1406183,30.26253303;120.1409483,30.26250002;120.1417486,30.26185647;120.1421728,30.26100729;120.1422306,30.26043593;120.1427091,30.26014509;120.1428783,30.2598852;120.1440664,30.25987282;120.1480372,30.26118783;120.1494314,30.26099698;120.148596,30.26044212;120.1485259,30.25940253;120.1494953,30.25948504;120.1500935,30.25974081;120.1515236,30.25995074;120.1526315,30.2595311;120.1581328,30.26156009;120.1588176,30.25849908;120.1587736,30.25794463;120.1588748,30.25752323;120.1627848,30.25161251;120.1628488,30.2507748;120.1627552,30.25058262;120.1619865,30.25010956;120.1622127,30.24979736;120.161387,30.24929308;120.1610739,30.2488661;120.160858,30.24824442;120.1608408,30.24735989;120.1610202,30.24614946;120.1608519,30.24544101;120.1592584,30.24221412;120.158234,30.24111154;120.1584977,30.23715951;120.1575985,30.2359177;120.1568906,30.23528698;120.1566171,30.23468333;120.1564693,30.23388997;120.1561193,30.23338694;120.157477,30.23300298;120.1594146,30.23162923;120.159586,30.23139404;120.1595345,30.22986464;120.1596829,30.22941759;120.1603157,30.22847678;120.1615278,30.22792453;120.1617272,30.2272876;120.1614757,30.22594754;120.1608816,30.2247914;120.1600361,30.22432292;120.1592936,30.22510335;120.1588254,30.22513882;120.1586659,30.22422526;120.1580943,30.22296604;120.1578657,30.2211103;120.1568831,30.22060791;120.154758,30.22038222;120.1550933,30.21765706;120.1544078,30.21724582;120.1532498,30.21756646;120.1524959,30.21756782;120.151359,30.21616591;120.1513417,30.21567898;120.148479,30.21273899;120.147245,30.21198486;120.1459993,30.21167752;120.1445025,30.21193169;120.1435753,30.21233615;120.1425042,30.21267512;120.141641,30.213394;120.140423,30.21358";
        String resCoordinates = getResCoordinates(coordinates, 2000);
        System.out.println(resCoordinates);
    }

    public static String getResCoordinates(String coordinates, int distance) {
        StringBuilder res = new StringBuilder();
        String[] pointsStr = coordinates.split(";");
        List<double[]> points = new ArrayList<>();
        for (String pointStr : pointsStr) {
            String[] lonLat = pointStr.split(",");
            double lon = Double.parseDouble(lonLat[0]);
            double lat = Double.parseDouble(lonLat[1]);
            points.add(new double[]{lon, lat});
        }
        double[] centroid = calculateCentroid(points);
        for (double[] point : points) {
            double direction = calculateDirection(centroid[0], centroid[1], point[0], point[1]);
            double[] extendedPoint = extendPoint(point[0], point[1], distance, direction);
            res.append(extendedPoint[0]).append(",").append(extendedPoint[1]).append(";");
        }
        return res.substring(0, res.length() - 1);
    }

    /**
     * 这个方法接受一个包含多个经纬度坐标的列表 points。
     * 方法首先创建一个长度为 2 的数组 centroid 用于存储中心点的经度和纬度。
     * 然后，对列表中的每个坐标点进行遍历，在遍历过程中，将所有坐标点的经度和纬度分别累加到 sumX 和 sumY 变量中。
     * 最后，通过将累加得到的经度和纬度分别除以坐标点个数，得到了多边形的几何中心的经度和纬度，并将其存储在 centroid 数组中并返回。
     * @param points
     * @return
     */
    public static double[] calculateCentroid(List<double[]> points) {
        double[] centroid = new double[2];
        double sumX = 0, sumY = 0;
        for (double[] point : points) {
            sumX += point[0];
            sumY += point[1];
        }
        centroid[0] = sumX / points.size();
        centroid[1] = sumY / points.size();
        return centroid;
    }

    /**
     * 这个方法接受四个参数，分别是起点的经度 lon1、纬度 lat1，终点的经度 lon2、纬度 lat2。
     * 方法首先将经度差值 dLon 和纬度差值 dLat 转换为弧度单位。
     * 然后，根据经纬度差值和三角函数计算得到方向角度。
     * 最后，通过调用 Math.atan2(y, x) 方法得到方向角度 brng，并确保其在 0 到 360 度之间。
     * @param lon1
     * @param lat1
     * @param lon2
     * @param lat2
     * @return
     */
    public static double calculateDirection(double lon1, double lat1, double lon2, double lat2) {
        double dLon = Math.toRadians(lon2 - lon1);
        double y = Math.sin(dLon) * Math.cos(Math.toRadians(lat2));
        double x = Math.cos(Math.toRadians(lat1)) * Math.sin(Math.toRadians(lat2)) -
                Math.sin(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) * Math.cos(dLon);
        double brng = Math.atan2(y, x);
        return (Math.toDegrees(brng) + 360) % 360;
    }

    /**
     * 这个方法接受四个参数，分别是原始点的经度 lon、纬度 lat，沿着原方向延伸的距离 distance，以及原方向的方向角度 direction。
     * 方法中定义了地球的半径 R（以米为单位）。
     * 然后，将方向角度 direction 转换为弧度单位 brng。
     * 接着，根据球面三角学中的公式，计算出新的纬度 lat2 和经度 lon2。
     * 最后，将计算得到的新的经度和纬度组成数组返回。
     * @param lon
     * @param lat
     * @param distance
     * @param direction
     * @return
     */
    public static double[] extendPoint(double lon, double lat, double distance, double direction) {
        double R = 6371000;
        double brng = Math.toRadians(direction);
        double lat1 = Math.toRadians(lat);
        double lon1 = Math.toRadians(lon);
        double lat2 = Math.asin(Math.sin(lat1) * Math.cos(distance / R) +
                Math.cos(lat1) * Math.sin(distance / R) * Math.cos(brng));
        double lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(distance / R) * Math.cos(lat1),
                Math.cos(distance / R) - Math.sin(lat1) * Math.sin(lat2));
        return new double[]{Math.toDegrees(lon2), Math.toDegrees(lat2)};
    }
}